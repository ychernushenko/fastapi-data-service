name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  test-and-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Run tests
        env:
          PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
          PUBSUB_TOPIC: "data-topic"
        run: |
          poetry run pytest

      - name: Generate OpenAPI JSON
        run: |
          poetry run python src/utils/generate_openapi.py        

      - name: Generate API documentation with sphinx-apidoc
        run: |
          poetry run sphinx-apidoc -o docs/source src/fastapi_app
          poetry run sphinx-apidoc -o docs/source src/consumer

      - name: Build Sphinx docs
        run: |
          cd docs
          poetry run sphinx-build -E -b html source _build/html

      - name: Deploy docs to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_build/html

  build-and-deploy:
    needs: test-and-docs
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      # Zip and Upload Cloud Function Source Code
      - name: Zip Cloud Function code
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          cd src/consumer 
          poetry export -f requirements.txt --output requirements.txt --without-hashes
          zip -r ../../consumer-function.zip *

      - name: Upload Zip to GCS
        run: |
          gcloud storage cp consumer-function.zip gs://fastapi-data-service/functions-source/consumer-function.zip

      # Build Docker image for FastAPI
      - name: Build fastapi-service Docker image
        run: |
          docker build -t gcr.io/${{ vars.GCP_PROJECT_ID }}/fastapi-service:latest -f Dockerfile.fastapi .

      - name: Configure Docker to use Google Cloud credentials
        run: |
          gcloud auth configure-docker --quiet

      - name: Push fastapi-service Docker image to Google Container Registry
        run: |
          docker push gcr.io/${{ vars.GCP_PROJECT_ID }}/fastapi-service:latest

      # Terraform deployment steps
      - name: Initialize Terraform
        working-directory: ./terraform
        env:
          GOOGLE_CLOUD_KEYFILE_JSON: ${{ secrets.GCP_SA_KEY }}
        run: terraform init

      - name: Apply Terraform (Deploy Infrastructure)
        working-directory: ./terraform
        env:
          GOOGLE_CLOUD_KEYFILE_JSON: ${{ secrets.GCP_SA_KEY }}
        run: |
          terraform apply -auto-approve \
            -var="project_id=${{ vars.GCP_PROJECT_ID }}" \
            -var="region=${{ vars.GCP_REGION }}" \
            -var="db_user=${{ vars.POSTGRES_USER }}" \
            -var="db_password=${{ secrets.POSTGRES_PASSWORD }}"
 
  generate-diagram:
    needs: build-and-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GCP_PROJECT_ID }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - name: Initialize Terraform
        working-directory: ./terraform
        env:
          GOOGLE_CLOUD_KEYFILE_JSON: ${{ secrets.GCP_SA_KEY }}
        run: terraform init

      - name: Generate Terraform Graph (DOT format)
        working-directory: ./terraform
        env:
          GOOGLE_CLOUD_KEYFILE_JSON: ${{ secrets.GCP_SA_KEY }}
        run: terraform graph > terraform-graph.dot

      - name: Install Graphviz
        run: sudo apt-get install -y graphviz

      - name: Convert DOT to PNG
        run: dot -Tpng terraform/terraform-graph.dot -o terraform-diagram.png

      - name: Checkout gh-pages branch
        run: |
          git fetch origin
          git checkout gh-pages || git checkout --orphan gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Move Diagram to gh-pages Branch
        run: |
          mkdir -p docs
          mv terraform-diagram.png docs/terraform-diagram.png

      - name: Commit and force push latest diagram to gh-pages
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/terraform-diagram.png
          git commit -m "Update Terraform diagram on gh-pages" || echo "No changes to commit"
          git push origin gh-pages --force
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
